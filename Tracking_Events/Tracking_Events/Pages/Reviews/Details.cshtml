@page
@model Tracking_Events.Pages.Reviews.DetailsModel
@inject ApplicationDbContext Context
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Review Details";
    string Zone;

    try
    {
        Zone = UserManager.GetUserAsync(User).Result.TimeZone;
    }
    catch
    {
        Zone = null;
    }
}

<h2>@ViewData["Title"]</h2>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAvzYPgeeulPJarwP3tpSwNW7UAZV7rJrM&callback=initMap" type="text/javascript"></script>
<script>
        var geocoder;
        var map;
        var gmarkers = [];
        var currentMarker;

        //Initializes the map and puts it into an id with 'map'
        function initMap() {
            geocoder = new google.maps.Geocoder();
            var latlng = new google.maps.LatLng(-34.397, 150.644);
            var mapOptions = {
                zoom: 8,
                center: latlng,
                mapTypeId: 'roadmap'
            }

            map = new google.maps.Map(document.getElementById('map'), mapOptions);

            //Current location
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var icon = 'http://maps.google.com/mapfiles/kml/pal3/icon56.png'
                    currentMarker = new google.maps.Marker({
                        map: map,
                        position: pos,
                        icon: icon
                    })
                    map.setCenter(pos);
                });
            }

            getlocation();
        }

        //Used to get an address and set markers
        function getlocation() {
            var address = @Html.Raw(Json.Serialize(Model.Review.Event.Venue.Address + " " + Model.Review.Event.Venue.City + " " + Model.Review.Event.Venue.State + " " + Model.Review.Event.Venue.Zip));

            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == 'OK') {
                    map.setCenter(results[0].geometry.location);
                    map.setZoom(14);
                    deleteMarkers();

                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    gmarkers.push(marker);
                    setZoom(map, gmarkers);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        //Used to Delete all map markers
        function deleteMarkers() {
            for (var i = 0; i < gmarkers.length; i++)
            {
                gmarkers[i].setMap(null);
            }
            gmarkers = [];
        }

        //Fit to all markers
        function setZoom(map, gmarkers) {
            var boundbox = new google.maps.LatLngBounds();
            boundbox.extend(currentMarker.getPosition());
            for (var i = 0; i < gmarkers.length; i++) {
                boundbox.extend(gmarkers[i].getPosition());
            }
            map.fitBounds(boundbox);
        }
</script>

<div class="row">
    <div class="col-md-6">
        <hr />
        <dl class="dl-horizontal">
            @if (Model.Review.Event.Venue.VenueType == (int)Tracking_Events.Pages.Account.VenueType.Personal)
            {
                <dt class="text-primary">
                    Hosted By
                </dt>
                <dd>
                    @(Model.Review.Event.Venue.User.FirstName + " " + Model.Review.Event.Venue.User.LastName)
                </dd>
            }
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.VenueName)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Venue.VenueName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.EventName)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.EventName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Genre)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Genre)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.StartTime)
            </dt>
            <dd>
                @TimeZoneInfo.ConvertTimeFromUtc(Model.Review.Event.StartTime, TimeZoneInfo.FindSystemTimeZoneById(Zone != null ? Zone : "UTC")).ToString("g")
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.EndTime)
            </dt>
            <dd>
                @TimeZoneInfo.ConvertTimeFromUtc(Model.Review.Event.StartTime, TimeZoneInfo.FindSystemTimeZoneById(Zone != null ? Zone : "UTC")).ToString("g")
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Description)
                <br />
                <br />
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.Address)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Venue.Address)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.City)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Venue.City)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.State)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Venue.State)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.Zip)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Event.Venue.Zip)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Event.Venue.VenueType)
            </dt>
            <dd>
                @(((Account.VenueType)Model.Review.Event.Venue.VenueType).ToString())
                <br />
                <br />
            </dd>
            <dt>
                Average Rating
            </dt>
            <dd>
                @Context.Review.Where(r => r.EventID == Model.Review.EventID && r.VenueID == Model.Review.VenueID).Average(r => r.Rating)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Review.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Review.Description)
            </dd>
        </dl>
    </div>
    <div class="col-md-6">
        <div id="map" style="width: auto; height: 400px;"></div>
    </div>
</div>
<div>
    <a asp-page="./Index">Back to List</a>
</div>
